@page "/project/{ProjectId}/file-view"
@inherits ViewFilePage

@using CodeHealth.UI.Components.Pages

@if (FileContent == null)
{
    <p>Loading file...</p>
}
else
{
    <div class="container-fluid">
        <div class="mb-3">
            <button class="btn btn-secondary mt-3" @onclick="NavigateBack">
                Back
            </button>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h5>@FileName</h5>
                @if (FileComplexities?.Any() == true)
                {
                    <div class="complexity-legend">
                        <span class="badge high-complexity">High Complexity (CC > 20)</span>
                        <span class="badge medium-complexity">Medium Complexity (CC > 10)</span>
                        <span class="badge low-complexity">Low Complexity (CC ‚â§ 10)</span>
                    </div>
                }
            </div>
            <div class="card-body p-0">
                <div class="code-container">
                    <!-- fancy symbols for line-level indicators -->
                    <div class="gutter">
                        @for (int i = 1; i <= Lines.Length; i++)
                        {
                            var issues = GetIssuesForLine(i);
                            var hasHighCC = issues.Any(i => GetIssueClass(i) == "high-complexity");
                            var hasMediumCC = issues.Any(i => GetIssueClass(i) == "medium-complexity");
                            var hasLowCC = issues.Any(i => GetIssueClass(i) == "low-complexity");
                            var hasLongMethod = issues.Any(i => GetIssueClass(i) == "long-method");

                            <div class="gutter-icon" title="@string.Join("\n", issues.Select(i => $"{i.Type}{(i.Metric != null ? $": {i.Metric.Name} {i.Metric.Value}" : "")}"))">
                                @if (hasHighCC)
                                {
                                    <span class="icon high-complexity-icon" title="High Cyclomatic Complexity">üî¥</span>
                                }
                                else if (hasMediumCC)
                                {
                                    <span class="icon medium-complexity-icon" title="Medium Cyclomatic Complexity">üü†</span>
                                }
                                else if (hasLowCC)
                                {
                                    <span class="icon low-complexity-icon" title="Low Cyclomatic Complexity">üü¢</span>
                                }
                                
                                @if (hasLongMethod)
                                {
                                    <span class="icon long-method-icon" title="Long Method">üìè</span>
                                }
                            </div>
                        }
                    </div>

                    <div class="line-numbers">
                        @for (int i = 1; i <= Lines.Length; i++)
                        {
                            <div class="line-number">@i</div>
                        }
                    </div>
                    <pre class="bg-white p-2 code-content">
                        @foreach (var (line, index) in Lines.Select((line, idx) => (line, idx)))
                        {
                            var lineNumber = index + 1;
                            var issues = GetIssuesForLine(lineNumber);
                            var issueClasses = issues.Select(GetIssueClass).Where(c => !string.IsNullOrEmpty(c)).Distinct();
                            
                            @if (issueClasses.Any())
                            {
                                <span class="@string.Join(" ", issueClasses)">@line<br /></span>
                            }
                            else
                            {
                                @line<br />
                            }
                        }
                    </pre>
                </div>
            </div>
        </div>
    </div>
}