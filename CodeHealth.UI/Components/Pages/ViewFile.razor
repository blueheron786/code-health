@page "/project/{ProjectId}/file-view"
@inherits ViewFilePage

@using CodeHealth.UI.Components.Pages
@using CodeHealth.Core.Parsing

@if (FileContent == null)
{
    <p>Loading file...</p>
}
else
{
    <div class="container-fluid">
        <div class="mb-3">
            <button class="btn btn-secondary mt-3" @onclick="NavigateBack">
                Back
            </button>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h5>@FileName</h5>
                @if (FileComplexities?.Any() == true)
                {
                    <div class="complexity-legend">
                        <span class="badge high-complexity">High Complexity (CC > 20)</span>
                        <span class="badge medium-complexity">Medium Complexity (CC > 10)</span>
                        <span class="badge low-complexity">Low Complexity (CC ≤ 10)</span>
                    </div>
                }
            </div>
            <div class="card-body p-0">
                <div class="code-container">
                    <!-- fancy symbols for line-level indicators -->
                    <div class="gutter">
                    @for (int i = 1; i <= Lines.Length; i++)
                    {
                        var issues = GetIssuesForLine(i);
                        var hasBlockIssue = issues.Any(issue => issue.Type is "CyclomaticComplexity" or "LongMethod" or "LongClass");

                        <div class="gutter-icon">
                            @if (hasBlockIssue)
                            {
                                <span class="icon" title="@string.Join(", ", issues.Select(i => i.Type))">⚠️</span>
                            }
                        </div>
                    }
                </div>

                    <div class="line-numbers">
                        @for (int i = 1; i <= Lines.Length; i++)
                        {
                            <div class="line-number">@i</div>
                        }
                    </div>
                    <pre class="bg-white p-2 code-content">
                        @foreach (var (line, index) in Lines.Select((line, idx) => (line, idx)))
                        {
                            var lineNumber = index + 1;
                            var issues = GetIssuesForLine(lineNumber);
                            var tokens = CodeTokenizer.Tokenize(line, lineNumber, issues);

                            <div>
                                @foreach (var token in tokens)
                                {
                                    if (token.Issues.Any())
                                    {
                                        var classes = string.Join(" ", token.Issues.Select(GetIssueClass));
                                        <span class="@classes" title="@string.Join(", ", token.Issues.Select(i => i.Type))">
                                            @token.Text
                                        </span>
                                    }
                                    else
                                    {
                                        <span>@token.Text</span>
                                    }
                                }
                                <br />
                            </div>
                        }

                    </pre>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* code, line numbers, etc. */

    .code-container {
        display: flex;
        overflow-x: auto;
    }
    
    .line-numbers {
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-right: 1px solid #dee2e6;
        text-align: right;
        user-select: none;
    }
    
    .line-number {
        padding-left: 5px;
        color: #888;
    }
    
    .code-content {
        margin: 0;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    /* Gutter and icons */
    .gutter {
        background-color: #fefefe;
        border-right: 1px solid #ccc;
        text-align: center;
        width: 2rem;
        user-select: none;
        padding: 0.5rem 0;
    }

    .gutter-icon {
        height: 1.2rem;
    }

    .icon {
        font-size: 0.8rem;
        cursor: help;
    }

    /* Code complexity */
    
    .high-complexity {
        background-color: #ffcccc;
    }
    
    .medium-complexity {
        background-color: #fff3cd;
    }
    
    .low-complexity {
        background-color: #d4edda;
    }
    
    .complexity-legend {
        display: flex;
        gap: 10px;
    }
    
    .complexity-legend .badge {
        padding: 3px 8px;
        font-size: 0.8rem;
    }

    /* CC headers */
    .complexity-legend {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }
    
    .complexity-legend .badge {
        padding: 4px 10px;
        font-size: 0.8rem;
        font-weight: 500;
        color: #212529 !important; /* Dark text for better contrast */
        border: 1px solid rgba(0,0,0,0.1);
    }
    
    .high-complexity, .badge.high-complexity {
        background-color: #ffcccc;
    }
    
    .medium-complexity, .badge.medium-complexity {
        background-color: #fff3cd;
    }
    
    .low-complexity, .badge.low-complexity {
        background-color: #d4edda;
    }

    /* Long lines */
    .long-line {
        outline-left: 4px solid orange; /* or whatever makes it distinct */
        background-color: #fff4e5;
    }

    /* Magic numbers and complex conditionals */
    .magic-number {
        text-decoration: underline dotted red;
        cursor: help;
    }

    .complex-conditional {
        text-decoration: underline dotted blue;
        cursor: help;
    }


</style>