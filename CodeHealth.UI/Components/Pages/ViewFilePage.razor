@page "/project/{ProjectId}/file-view"

@using CodeHealth.UI.Components.Pages

@if (FileContent == null)
{
    <p>Loading file...</p>
}
else
{
    <div class="container-fluid">
        <div class="mb-3">
            <button class="btn btn-secondary mt-3" @onclick="NavigateBack">
                Back
            </button>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h5>@FileName</h5>
                @if (FileComplexities?.Any() == true)
                {
                    <div class="issue-legend">
                        <span class="badge high-complexity">High Complexity (CC > 20)</span>
                        <span class="badge medium-complexity">Medium Complexity (CC > 10)</span>
                        <span class="badge low-complexity">Low Complexity (CC ‚â§ 10)</span>
                        <span class="badge magic-number">Magic Numbers</span>
                    </div>
                }
            </div>
            <div class="card-body p-0">
                <div class="code-container">
                    <!-- fancy symbols for line-level indicators -->
                    <div class="gutter">
                        @for (int i = 1; i <= Lines.Length; i++)
                        {
                            var issues = GetIssuesForLine(i);
                            var hasHighCC = issues.Any(issue => GetIssueClass(issue) == "high-complexity");
                            var hasMediumCC = issues.Any(issue => GetIssueClass(issue) == "medium-complexity");
                            var hasLowCC = issues.Any(issue => GetIssueClass(issue) == "low-complexity");
                            var hasLongMethod = issues.Any(issue => GetIssueClass(issue) == "long-method");
                            var hasMagicNumberOnLine = LineContainsMagicNumber(i);
                            var hasTodo = LineContainsTodo(i);
                            var todos = GetTodosForLine(i);

                            var issueTooltip = string.Join("\n",
                            issues.Select(issue => $"{issue.Type}{(issue.Metric != null ? $": {issue.Metric.Name} {issue.Metric.Value}" : "")}"));

                            var todoTooltip = hasTodo ? $"\nTODOs:\n{string.Join("\n", todos.Select(t => t.Message))}" : "";

                            <div class="line-container">
                                <div class="gutter-icon" title="@(issueTooltip + todoTooltip)">
                                    @if (hasHighCC)
                                    {
                                        <span class="icon high-complexity-icon">üî¥</span>
                                    }
                                    @if (hasMediumCC)
                                    {
                                        <span class="icon medium-complexity-icon">üü†</span>
                                    }
                                    @if (hasLowCC)
                                    {
                                        <span class="icon low-complexity-icon">üü¢</span>
                                    }
                                    @if (hasLongMethod)
                                    {
                                        <span class="icon long-method-icon">üìè</span>
                                    }
                                    @if (hasMagicNumberOnLine)
                                    {
                                        <span class="icon magic-number-icon">ü™Ñ</span>
                                    }
                                    @if (hasTodo)
                                    {
                                        <span class="icon todo-icon">üìù</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Line Numbers -->
                    <div class="line-numbers">
                        @for (int i = 1; i <= Lines.Length; i++)
                        {
                            <div class="line-container">
                                <div class="line-number">@i</div>
                            </div>
                        }
                    </div>

                    <!-- Code Content -->
                    <pre class="code-content">
                        @foreach (var (line, index) in Lines.Select((line, idx) => (line, idx)))
                        {
                            var lineNumber = index + 1;
                            var issues = GetIssuesForLine(lineNumber);
                            var issueClasses = issues.Select(GetIssueClass).Where(c => !string.IsNullOrEmpty(c)).Distinct();
                            var magicNumbersOnLine = GetMagicNumbersForLine(lineNumber);

                            <div class="line-container">
                                <span class="@string.Join(" ", issueClasses)">
                                    @if (magicNumbersOnLine.Any())
                                    {
                                        var currentIndex = 0;
                                        foreach (var magicNumber in magicNumbersOnLine)
                                        {
                                            @line.Substring(currentIndex, (magicNumber.Column ?? 0) - 1 - currentIndex)
                                            <span class="magic-number-highlight" title="@magicNumber.Message">
                                                @line.Substring((magicNumber.Column ?? 0) - 1, (magicNumber.EndColumn ?? 0) - (magicNumber.Column ?? 0) + 1)
                                            </span>
                                            currentIndex = magicNumber.EndColumn ?? 0;
                                        }
                                        @if (currentIndex < line.Length)
                                        {
                                            @line.Substring(currentIndex)
                                        }
                                    }
                                    else
                                    {
                                        @line
                                    }
                                </span>
                            </div>
                        }
                    </pre>

                </div>
            </div>
        </div>
    </div>
}